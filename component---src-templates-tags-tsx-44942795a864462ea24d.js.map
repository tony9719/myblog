{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","props","tag","pageContext","_props$data$allMarkdo","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_layouts__WEBPACK_IMPORTED_MODULE_9__","react_helmet__WEBPACK_IMPORTED_MODULE_11___default","a","lang","config","title","name","content","description","property","siteUrl","pathContext","slug","facebook","twitter","split","_components_Wrapper__WEBPACK_IMPORTED_MODULE_8__","className","image","css","_emotion_css__WEBPACK_IMPORTED_MODULE_0__","outer","SiteHeader","style","backgroundImage","childImageSharp","fluid","src","inner","_components_header_SiteNav__WEBPACK_IMPORTED_MODULE_6__","isHome","_styles_shared__WEBPACK_IMPORTED_MODULE_10__","react__WEBPACK_IMPORTED_MODULE_4___default","Fragment","SiteMain","PostFeed","PostFeedRaise","map","_ref","_components_PostCard__WEBPACK_IMPORTED_MODULE_7__","key","fields","post","_components_Footer__WEBPACK_IMPORTED_MODULE_5__","pageQuery"],"mappings":"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","file":"component---src-templates-tags-tsx-44942795a864462ea24d.js","sourcesContent":["import { graphql } from 'gatsby';\r\nimport React from 'react';\r\n\r\nimport Footer from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport PostCard from '../components/PostCard';\r\nimport Wrapper from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  PostFeedRaise,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n} from '../styles/shared';\r\nimport { PageContext } from './post';\r\nimport Helmet from 'react-helmet';\r\nimport config from '../website-config';\r\n\r\ninterface TagTemplateProps {\r\n  pathContext: {\r\n    slug: string;\r\n  };\r\n  pageContext: {\r\n    tag: string;\r\n  };\r\n  data: {\r\n    allTagYaml: {\r\n      edges: Array<{\r\n        node: {\r\n          id: string;\r\n          description: string;\r\n          image?: {\r\n            childImageSharp: {\r\n              fluid: any;\r\n            };\r\n          };\r\n        };\r\n      }>;\r\n    };\r\n    allMarkdownRemark: {\r\n      totalCount: number;\r\n      edges: Array<{\r\n        node: PageContext;\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nconst Tags: React.FC<TagTemplateProps> = props => {\r\n  const tag = (props.pageContext.tag) ? props.pageContext.tag : '';\r\n  const { edges, totalCount } = props.data.allMarkdownRemark;\r\n  const tagData = props.data.allTagYaml.edges.find(\r\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\r\n  );\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <Helmet>\r\n        <html lang={config.lang} />\r\n        <title>\r\n          {tag} - {config.title}\r\n        </title>\r\n        <meta\r\n          name=\"description\"\r\n          content={tagData && tagData.node ? tagData.node.description : ''}\r\n        />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\r\n        <meta property=\"og:url\" content={config.siteUrl + props.pathContext.slug} />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl + props.pathContext.slug} />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n      </Helmet>\r\n      <Wrapper>\r\n        <header\r\n          className={`${tagData && tagData.node.image ? '' : 'no-cover'}`}\r\n          css={[outer, SiteHeader]}\r\n          style={{\r\n            backgroundImage:\r\n              tagData && tagData.node.image ?\r\n                `url('${tagData.node.image.childImageSharp.fluid.src}')` :\r\n                '',\r\n          }}\r\n        >\r\n          <div css={inner}>\r\n            <SiteNav isHome={false} />\r\n            <SiteHeaderContent>\r\n              <SiteTitle>{tag}</SiteTitle>\r\n              <SiteDescription>\r\n                {tagData && tagData.node.description ? (\r\n                  tagData.node.description\r\n                ) : (\r\n                  <>\r\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\r\n                    {totalCount === 1 && '1 post'}\r\n                    {totalCount === 0 && 'No posts'}\r\n                  </>\r\n                )}\r\n              </SiteDescription>\r\n            </SiteHeaderContent>\r\n          </div>\r\n        </header>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={inner}>\r\n            <div css={[PostFeed, PostFeedRaise]}>\r\n              {edges.map(({ node }) => (\r\n                <PostCard key={node.fields.slug} post={node} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allTagYaml {\r\n      edges {\r\n        node {\r\n          id\r\n          description\r\n          image {\r\n            childImageSharp {\r\n              fluid(maxWidth: 3720) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            date\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1240) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            author {\r\n              id\r\n              bio\r\n              avatar {\r\n                children {\r\n                  ... on ImageSharp {\r\n                    fixed(quality: 90) {\r\n                      src\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}